# ### *1. Алгоритм нахождения максимального элемента в списке*
# # - *Описание:* Найдём максимальный элемент в списке.


# # Алгоритм нахождения максимального элемента
# def find_max(numbers):
#     # Установим первый элемент как максимальный
#     max_num = numbers[0]
    
#     # Перебираем элементы списка
#     for num in numbers:
#         if num > max_num:
#             max_num = num  # Обновляем максимум
#     return max_num

# # Пример
# numbers = [3, 1, 8, 5, 7]
# print("Максимальный элемент:", find_max(numbers))


# ### *2. Алгоритм сортировки списка (пузырьковая сортировка)*
# # - *Описание:* Сортируем список с помощью пузырьковой сортировки.


# # Алгоритм пузырьковой сортировки
# def bubble_sort(arr):
#     n = len(arr)
#     for i in range(n):
#         for j in range(0, n - i - 1):
#             # Сравниваем элементы и меняем местами, если нужно
#             if arr[j] > arr[j + 1]:
#                 arr[j], arr[j + 1] = arr[j + 1], arr[j]
#     return arr

# # Пример
# numbers = [64, 34, 25, 12, 22, 11, 90]
# print("Отсортированный список:", bubble_sort(numbers))


# ### *3. Алгоритм поиска числа в списке (линейный поиск)*
# # - *Описание:* Проверяем, есть ли заданное число в списке.


# # Линейный поиск 
# def linear_search(numbers, target):
#     for i, num in enumerate(numbers):
#         if num == target:
#             return f"Число найдено на индексе {i}"
#     return "Число не найдено"

# # Пример
# numbers = [10, 20, 30, 40, 50]
# print(linear_search(numbers, 30))
# print(linear_search(numbers, 100))


# # ### *4. Алгоритм проверки числа на простоту*
# # - *Описание:* Проверяем, является ли число простым.


# # Проверка числа на простоту
# def is_prime(number):
#     if number <= 1:
#         return False
#     for i in range(2, int(number ** 0.5) + 1):
#         if number % i == 0:
#             return False
#     return True

# # Пример
# print("5 простое?", is_prime(5))
# print("10 простое?", is_prime(10))


# # ### *5. Алгоритм вычисления факториала числа*
# # - *Описание:* Вычисляем факториал числа с помощью рекурсии.


# # Вычисление факториала
# def factorial(n):
#     if n == 0 or n == 1:
#         return 1
#     return n * factorial(n - 1)

# # Пример
# print("Факториал 5:", factorial(5))
# print("Факториал 7:", factorial(7))


# # ### *6. Алгоритм поиска числа Фибоначчи*
# # - *Описание:* Вычисляем n-е число Фибоначчи с помощью рекурсии.


# # Число Фибоначчи
# def fibonacci(n):
#     if n == 0:
#         return 0
#     if n == 1:
#         return 1
#     return fibonacci(n - 1) + fibonacci(n - 2)

# # Пример
# print("Число Фибоначчи 7:", fibonacci(7))


# # ### *7. Алгоритм поиска наименьшего общего делителя (НОД)*
# # - *Описание:* Используем алгоритм Евклида для нахождения НОД.


# # Нахождение НОД
# def gcd(a, b):
#     while b != 0:
#         a, b = b, a % b
#     return a

# # Пример
# print("НОД 48 и 18:", gcd(48, 18))


# # ### *8. Быстрое возведение в степень*
# # - *Описание:* Возводим число в степень эффективно.


# # Быстрое возведение в степень
# def power(base, exp):
#     if exp == 0:
#         return 1
#     if exp % 2 == 0:
#         half = power(base, exp // 2)
#         return half * half
#     else:
#         return base * power(base, exp - 1)

# # Пример
# print("2^10 =", power(2, 10))


# # ### *9. Алгоритм разворота строки*
# # - *Описание:* Разворачиваем строку.


# # Разворот строки
# def reverse_string(s):
#     return s[::-1]

# # Пример
# print("Разворот строки 'Python':", reverse_string("Python"))


# # ### *10. Генерация всех подстрок строки*
# # - *Описание:* Генерируем все возможные подстроки.


# # Генерация подстрок
# def generate_substrings(s):
#     substrings = []
#     for i in range(len(s)):
#         for j in range(i + 1, len(s) + 1):
#             substrings.append(s[i:j])
#     return substrings

# # Пример
# print("Подстроки строки 'abc':", generate_substrings("abc"))



"""

Что такое алгоритм?
Алгоритм — это последовательность действий или шагов, которые выполняются для решения определённой задачи.

Какой алгоритм используется для сортировки массива чисел?
Наиболее популярные: пузырьковая сортировка, сортировка вставками, быстрая сортировка, сортировка слиянием.

Что такое линейный поиск?
Линейный поиск — это алгоритм, который последовательно проверяет каждый элемент массива, пока не найдёт искомое значение или не пройдёт весь массив.

Как работает бинарный поиск?
Бинарный поиск делит отсортированный массив пополам и сравнивает искомый элемент с серединой. Повторяется в левой или правой половине, пока не будет найден элемент или массив не станет пустым.

Что такое сложность алгоритма?
Сложность алгоритма — это оценка времени или памяти, необходимых для его выполнения, в зависимости от размера входных данных. Основные виды: временная и пространственная.

Что такое алгоритм "разделяй и властвуй"?
Это метод, который разбивает задачу на подзадачи, решает их рекурсивно и объединяет результаты для решения исходной задачи (например, быстрая сортировка).

Что такое рекурсия?
Рекурсия — это метод, когда функция вызывает саму себя до достижения базового случая.


Что такое алгоритм поиска в глубину (DFS)?* 
- Ответ: Алгоритм поиска в глубину исследует вершины графа или дерева, двигаясь по одному пути до конца, а затем возвращается, чтобы исследовать другие пути.

9. *Что такое алгоритм поиска в ширину (BFS)?*  
   - Ответ: Алгоритм поиска в ширину исследует все вершины на текущем уровне, прежде чем переходить к следующему уровню.

10. *Что такое сортировка слиянием?*  
   - Ответ: Сортировка слиянием — это алгоритм, который делит список на более мелкие части, сортирует их, а затем сливает в один отсортированный список.


"""





